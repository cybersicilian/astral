import { CardArgs } from "../../gameplay/cards/CardArgs";
import Player from "../../gameplay/player/Player";
import { AbilityChoices } from "../../gameplay/cards/choices/AbilityChoices";
import { Weights } from "../../gameplay/ai/AIWeights";
import { ChoiceType } from "../../gameplay/cards/choices/ChoiceType";
import { IProppable, Properties } from "../../structure/interfaces/IProppable";
import { VosEvent } from "../../structure/utils/Generics";
import { IEventable } from "../../structure/interfaces/IEventable";
import { IPlayable } from "../../structure/interfaces/IPlayable";
import { Resolver } from "../../structure/utils/Resolver";
import { AIMeta, AIProfile, AIWeights } from "../../gameplay/ai/AIProfile";
export default class BaseAbility implements IProppable, IEventable, IPlayable {
    private text;
    private readonly callback;
    private readonly choices;
    private formula;
    private weights;
    private canPlay;
    private canGive;
    private props;
    private events;
    private traits;
    constructor(text: string, choices: Resolver<AbilityChoices[]>, callback: (abilityArgs: CardArgs, madeChoices: (ChoiceType)[]) => void);
    ai(): AIProfile;
    sai(profile: AIWeights, meta?: AIMeta): this;
    isCostAbility(): any;
    clone(): BaseAbility;
    getChoices(): AbilityChoices[];
    getCallback(): (abilityArgs: CardArgs, madeChoices: ChoiceType[]) => void;
    setCanPlay(canPlay: Resolver<boolean>): this;
    setCanGive(canGive: Resolver<boolean>): void;
    canBePlayed(cardArgs: CardArgs): boolean;
    canBeGiven(opp: Player, cardArgs: CardArgs): boolean;
    setText(text: string): this;
    hasRestriction(): boolean;
    getText(): string;
    getFormulatedText(cardArgs: CardArgs): string;
    setWeights(weights: Weights): this;
    getWeights(): Weights;
    informChoices(args: CardArgs): AbilityChoices[];
    setFormula(formula: string): this;
    textualizeFormula(): string;
    calcFormula(cardArgs: CardArgs): any;
    makeChoices(args: CardArgs): (import("../../gameplay/cards/Card").default | Player | null)[];
    exec(cardArgs: CardArgs): void;
    on(name: string, func: VosEvent): this;
    addEvent(name: string, func: VosEvent): void;
    removeEvent(name: string): this;
    getEvent(name: string): VosEvent[];
    hasFormula(): boolean;
    getFormula(): string;
    fireEvents(name: string, cardArgs: CardArgs): void;
    getProps(): Properties;
    getProp(prop: string): any;
    setProp(prop: string, value: any): this;
}
